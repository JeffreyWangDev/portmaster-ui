#!/bin/bash

baseDir="$( cd "$(dirname "$0")" && pwd )"
cd "$baseDir"

COL_OFF="\033[00m"
COL_BOLD="\033[01;01m"
COL_RED="\033[31m"

destDir="../../dist/all/ui/modules"

function prep {
  # get version
  version=$(jq -r '.version' package.json)
  # build versioned file name
  filename="${module}_v${version//./-}.zip"
  # build destination path
  destPath=$destDir/$filename
}

function check {
  for module in *; do
    if [[ -f "$module/package.json" ]]; then
      # go to module dir
      cd $module
      # prep env
      prep

      # Check if module is ignored.
      ignoringExt=""
      if [[ -f ".ignore" ]]; then
        ignoringExt="(ignoring)"
      fi

      # check if file exists
      if [[ -f $destPath ]]; then
        echo "[modules] $module $version already built $ignoringExt"
      else
        echo -e "${COL_BOLD}[modules] $module $version${COL_OFF} $ignoringExt"
      fi

      cd "$baseDir"
    fi
  done
}

function build {
  for module in *; do
    if [[ -f "$module/package.json" ]]; then
      if [[ -f "$module/.ignore" ]]; then
        echo "$module is being ignored, skipping..."
        continue
      fi

      echo -e "\npackaging $module\n"

      # go to module dir
      cd $module
      # prep env
      prep

      # check if file exists
      if [[ -f $destPath ]]; then
        echo "$module already built in version $version, skipping..."
        cd "$baseDir"
        continue
      fi

      # build

      # remove old dist
      rm -rf dist

      # build
      npm run build
      if [[ $? -ne 0 ]]; then
        echo -e "\n${COL_BOLD}[modules] $module: ${COL_RED}BUILD FAILED.${COL_OFF}"
        exit 1
      fi

      # go to dist dir
      cd dist

      # remove unnecessary stuff
      rm -rf "assets"

      # zip up!
      mkdir -p ../$destDir
      zip -r ../$destPath *

      echo -e "\n${COL_BOLD}[modules] $module: successfully built.${COL_OFF}"

      # go back to base dir
      cd "$baseDir"
    fi
  done
}

function reset {
  for module in *; do
    if [[ -f "$module/package.json" ]]; then
      # go to module dir
      cd $module
      # prep env
      prep

      # delete if file exists
      if [[ -f $destPath ]]; then
        rm $destPath
      fi

      cd "$baseDir"
    fi
  done
}

case $1 in
  "check" )
    check
    ;;
  "build" )
    build
    ;;
  "reset" )
    reset
    ;;
  * )
    echo ""
    echo "build list:"
    echo ""
    check
    echo ""
    read -p "press [Enter] to start building" x
    echo ""
    build
    echo ""
    echo "finished building."
    echo ""
    ;;
esac
